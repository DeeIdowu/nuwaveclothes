{"ast":null,"code":"import { createSelector } from \"reselect\"; //input selector - obtains the whole state and produces a slice of it, obtaining reducer state of cart:\n\nconst selectCart = state => state.cart;\n\nexport const selectCartItems = createSelector([selectCart], cart => cart.cartItems //return of value of property in order\n); //for hidden:\n\nexport const selectCartHidden = createSelector([selectCart], cart => cart.hidden); //for the cartitems counter:\n\nexport const selectCartItemsCount = createSelector([selectCartItems], cartItems => cartItems.reduce((accumulatedQuantity, cartItem) => accumulatedQuantity + cartItem.quantity, 0)); //to cart total:\n\nexport const selectCartTotal = createSelector([selectCartItems], cartItems => cartItems.reduce((accumulatedQuantity, cartItem) => accumulatedQuantity + cartItem.quantity * cartItem.price, 0));","map":{"version":3,"sources":["/Users/deethegreat/Desktop/2019-Job-Prep-Content/Complete-React-Dev/Master-Project/nuwaveclothes/client/src/redux/cart/CartSelector.js"],"names":["createSelector","selectCart","state","cart","selectCartItems","cartItems","selectCartHidden","hidden","selectCartItemsCount","reduce","accumulatedQuantity","cartItem","quantity","selectCartTotal","price"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B,C,CAEA;;AACA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAlC;;AAEA,OAAO,MAAMC,eAAe,GAAGJ,cAAc,CAC3C,CAACC,UAAD,CAD2C,EAE3CE,IAAI,IAAIA,IAAI,CAACE,SAF8B,CAEpB;AAFoB,CAAtC,C,CAIP;;AACA,OAAO,MAAMC,gBAAgB,GAAGN,cAAc,CAC5C,CAACC,UAAD,CAD4C,EAE5CE,IAAI,IAAIA,IAAI,CAACI,MAF+B,CAAvC,C,CAKP;;AACA,OAAO,MAAMC,oBAAoB,GAAGR,cAAc,CAChD,CAACI,eAAD,CADgD,EAEhDC,SAAS,IACPA,SAAS,CAACI,MAAV,CACE,CAACC,mBAAD,EAAsBC,QAAtB,KACED,mBAAmB,GAAGC,QAAQ,CAACC,QAFnC,EAGE,CAHF,CAH8C,CAA3C,C,CAUP;;AACA,OAAO,MAAMC,eAAe,GAAGb,cAAc,CAC3C,CAACI,eAAD,CAD2C,EAE3CC,SAAS,IACPA,SAAS,CAACI,MAAV,CACE,CAACC,mBAAD,EAAsBC,QAAtB,KACED,mBAAmB,GAAGC,QAAQ,CAACC,QAAT,GAAoBD,QAAQ,CAACG,KAFvD,EAGE,CAHF,CAHyC,CAAtC","sourcesContent":["import { createSelector } from \"reselect\";\n\n//input selector - obtains the whole state and produces a slice of it, obtaining reducer state of cart:\nconst selectCart = state => state.cart;\n\nexport const selectCartItems = createSelector(\n  [selectCart],\n  cart => cart.cartItems //return of value of property in order\n);\n//for hidden:\nexport const selectCartHidden = createSelector(\n  [selectCart],\n  cart => cart.hidden\n);\n\n//for the cartitems counter:\nexport const selectCartItemsCount = createSelector(\n  [selectCartItems],\n  cartItems =>\n    cartItems.reduce(\n      (accumulatedQuantity, cartItem) =>\n        accumulatedQuantity + cartItem.quantity,\n      0\n    )\n);\n\n//to cart total:\nexport const selectCartTotal = createSelector(\n  [selectCartItems],\n  cartItems =>\n    cartItems.reduce(\n      (accumulatedQuantity, cartItem) =>\n        accumulatedQuantity + cartItem.quantity * cartItem.price,\n      0\n    )\n);\n"]},"metadata":{},"sourceType":"module"}