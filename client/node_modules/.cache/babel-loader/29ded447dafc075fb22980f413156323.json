{"ast":null,"code":"import _defineProperty from \"/Users/deethegreat/Desktop/2019-Job-Prep-Content/Complete-React-Dev/Master-Project/nuwaveclothes/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\"; //database\n\nimport \"firebase/auth\"; //auth\n\nconst config = {\n  apiKey: \"AIzaSyAizwvlWQxAcUuJ-CodGoya7GzzuK7IDfY\",\n  authDomain: \"commerce-db.firebaseapp.com\",\n  databaseURL: \"https://commerce-db.firebaseio.com\",\n  projectId: \"commerce-db\",\n  storageBucket: \"\",\n  messagingSenderId: \"109010889992\",\n  appId: \"1:109010889992:web:75e1df474250c1c1\"\n}; //to extract the o-auth from google and placed into firebase database:\n\nexport const createdUserProfileDocument = async (userAuth, additonalData) => {\n  //save to database when they log in not when signed out, evaluating the null return\n  if (!userAuth) return; //if user exists, query through database/document to confirm if it exist - queryreference/query snapshot\n  //these return in a format of document or collection of from the database.\n  //determinant of rerun of data.\n\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid)); //to obtain snapshot of the user ref in the document\n\n  const snapShot = await userRef.get(); //if the snapshot doesnt exist do this:\n\n  if (!snapShot.exists) {\n    //utilizing documentRef to confirm data & id:\n    //what properties do we want to store\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date(); //asynchronous request to database to store user if the user doesnt exist, then set the user data below:\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additonalData));\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  } //return the userRef for future use\n\n\n  return userRef;\n};\nfirebase.initializeApp(config); //new collection to store the store items:\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  //to obtain collection key\n  const collectionRef = firestore.collection(collectionKey); //batch method:\n\n  const batch = firestore.batch(); //loop the objects via forEach method:\n\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); //new id being creating\n    //batch the new id:\n\n    batch.set(newDocRef, obj);\n  }); //to fire batch call:\n\n  return await batch.commit(); //returns a promise upon succession\n}; //for new snapshot function to use within Shop.js:\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n}; //new method:\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); //google auth\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/deethegreat/Desktop/2019-Job-Prep-Content/Complete-React-Dev/Master-Project/nuwaveclothes/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createdUserProfileDocument","userAuth","additonalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\"; //database\nimport \"firebase/auth\"; //auth\n\nconst config = {\n  apiKey: \"AIzaSyAizwvlWQxAcUuJ-CodGoya7GzzuK7IDfY\",\n  authDomain: \"commerce-db.firebaseapp.com\",\n  databaseURL: \"https://commerce-db.firebaseio.com\",\n  projectId: \"commerce-db\",\n  storageBucket: \"\",\n  messagingSenderId: \"109010889992\",\n  appId: \"1:109010889992:web:75e1df474250c1c1\"\n};\n\n//to extract the o-auth from google and placed into firebase database:\nexport const createdUserProfileDocument = async (userAuth, additonalData) => {\n  //save to database when they log in not when signed out, evaluating the null return\n  if (!userAuth) return;\n\n  //if user exists, query through database/document to confirm if it exist - queryreference/query snapshot\n  //these return in a format of document or collection of from the database.\n  //determinant of rerun of data.\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  //to obtain snapshot of the user ref in the document\n  const snapShot = await userRef.get();\n\n  //if the snapshot doesnt exist do this:\n  if (!snapShot.exists) {\n    //utilizing documentRef to confirm data & id:\n    //what properties do we want to store\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    //asynchronous request to database to store user if the user doesnt exist, then set the user data below:\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additonalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n  //return the userRef for future use\n  return userRef;\n};\n\nfirebase.initializeApp(config);\n\n//new collection to store the store items:\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  //to obtain collection key\n  const collectionRef = firestore.collection(collectionKey);\n  //batch method:\n  const batch = firestore.batch();\n  //loop the objects via forEach method:\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    //new id being creating\n    //batch the new id:\n    batch.set(newDocRef, obj);\n  });\n  //to fire batch call:\n  return await batch.commit(); //returns a promise upon succession\n};\n//for new snapshot function to use within Shop.js:\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\n//new method:\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n//google auth\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}